name: compile-and-run
on:
  push:
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:

jobs:
  build-compile-test:
    name: Build & Test on ${{ matrix.config.os }} with ${{ matrix.config.compiler }} (${{ matrix.build_type }} build)
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        config:
          - {
            compiler: g++-10,
            os: ubuntu-20.04,
            os-base: '',
            extra-flags: '-fno-omit-frame-pointer -Wall -fsanitize=address,undefined'
          }
          - {
            compiler: clang++-10,
            os: ubuntu-20.04,
            os-base: 'ubuntu',
            extra-flags: ''
          }
          - {
            compiler: cl.exe,
            os: windows-2019,
            os-base: 'windows',
            extra-flags: ''
          }
          - {
            compiler: clang++,
            os: macos-latest,
            os-base: 'mac',
            extra-flags: ''
          }
        runall:
          - ${{ contains('refs/heads/mains refs/heads/develops', github.ref) || contains(github.event.head_commit.message, ' ci') || contains(github.event.head_commit.message, 'ci ')}}
        runmac:
          - ${{ contains(github.event.head_commit.message, 'mac') }}
        runwindows:
          - ${{ contains(github.event.head_commit.message, 'windows') }}
        runrelease:
          - ${{ contains(github.event.head_commit.message, 'release') }}
        exclude:
          - { config: { os-base: 'mac' }, runall: false, runmac: false }
          - { build_type: 'Release', config: { os-base: 'windows' }, runall: false, runwindows: false }
          - { build_type: 'Release', config: { os-base: 'ubuntu' }, runall: false, runrelease: false }
    env:
      build_folder_location: build
    runs-on: ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Prepare useful stamps
        id: stamps
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y_%m_%d_%H_%M_%S" UTC)
          message("  set-output name=time::${current_date}")
          message("::set-output name=time::${current_date}")
          # log and set

      - name: Install Dependencies (Ubuntu)
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get install ninja-build ccache
          ${{ matrix.config.compiler }} --version && cmake --version && ninja --version && ccache --version

      - name: Cache CCache (Ubuntu only)
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: actions/cache@v2
        with:
          path: /home/runner/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.build_type }}-${{ matrix.config.compiler }}-time${{ steps.stamps.outputs.time }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.build_type }}-${{ matrix.config.compiler }}-

      # we have 4 distinct CCaches which means we should! have 1gb left for other things (fuzzing etc.)
      - name: Configure CCache limit
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          ccache -M 1000M
          ccache -s

      - name: Install Dependencies (Windows)
        if: startsWith(matrix.config.os, 'windows')
        run: |
          pip install ninja

      - name: Install Dependencies (macOS)
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install ninja

      - name: Configure MSVC console (Windows)
        if: startsWith(matrix.config.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Make build folder
        run: mkdir -p ${{ env.build_folder_location }}

      - name: Setup build
        run: >
          cmake -S . -B ${{ env.build_folder_location }} -G Ninja
          -DCMAKE_CXX_COMPILER="${{ matrix.config.compiler }}"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DEXTENDED_TESTS=1
          -DWITH_BENCHMARKS=1
          -DCMAKE_CXX_FLAGS="${{ matrix.config.extra-flags }}"

      - name: Build
        timeout-minutes: 30
        run: cmake --build ${{ env.build_folder_location }}

      - name: Post-build ccache
        if: startsWith(matrix.config.os, 'ubuntu')
        run: ccache -s

      - name: Run tests
        timeout-minutes: 15
        run: |
          cd ${{ env.build_folder_location }}
          ctest --output-on-failure

      - name: Run benchmarks
        timeout-minutes: 15
        run: >
          ${{ env.build_folder_location }}/ActionsTest --benchmark-no-analysis
          --benchmark-samples 1000
          [benchmark]

